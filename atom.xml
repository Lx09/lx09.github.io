<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lixin&#39;s blog</title>
  
  <subtitle>Better Late Than Never</subtitle>
  <link href="https://lx09.github.io/atom.xml" rel="self"/>
  
  <link href="https://lx09.github.io/"/>
  <updated>2022-06-12T08:47:21.911Z</updated>
  <id>https://lx09.github.io/</id>
  
  <author>
    <name>lixin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VsCode+Latex调用bibtex</title>
    <link href="https://lx09.github.io/2022/06/12/VsCode-Latex%E8%B0%83%E7%94%A8bibtex/"/>
    <id>https://lx09.github.io/2022/06/12/VsCode-Latex%E8%B0%83%E7%94%A8bibtex/</id>
    <published>2022-06-12T08:14:40.000Z</published>
    <updated>2022-06-12T08:47:21.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用Bibtex管理参考文献十分方便，但是在Vscode平台使用latex可能会引用文献不显示，参考文献列表也不显示的问题。排除语法使用不当的问题，最大的可能是VsCode相关环境设置不对。</p><h1 id="Bibtex调用逻辑"><a href="#Bibtex调用逻辑" class="headerlink" title="Bibtex调用逻辑"></a>Bibtex调用逻辑</h1><ol><li>准备好tex主文件和bib参考文献文件</li><li>xelatex编译tex文件</li><li><strong>使用bibtex处理tex中涉及的bib文件</strong></li><li>再次调用xelatex编译tex文件，刷新生成的pdf文件</li></ol><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>VsCode默认没有使用bibtex编译bib文件，报错中会出现<code>no tex文件名.bbl file</code></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li><p>Mac快捷键<code>Command + ,</code>或者点击VsCode左下角齿轮，打开setting</p></li><li><p>在setting页面中搜索recipe，选择Latex相关，点击<code>Edit in settings.json</code><br><img src="https://cdn.jsdelivr.net/gh/Lx09/picgo/20220612163618.png" alt="Latex: Recipes"></p></li><li><p>修改Recipes配置信息并保存</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;latex-workshop.latex.recipes&quot;</span>: </span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;latexmk&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;latexmk&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;xelatex -&gt; bibtex -&gt; xelatex*2&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tools&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;bibtex&quot;</span>,   </span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span>,</span><br><span class="line">                <span class="string">&quot;xelatex&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br></pre></td></tr></table></figure></li></ol><p>设置完成后，选择红框中编译recipe，而不使用默认的编译配置。也可以将该recipe作为默认编译配置，但是我偏好自动编译，额外使用1*bibtex+2*xelatex拖慢编译速度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;使用Bibtex管理参考文献十分方便，但是在Vscode平台使用latex可能会引用文献不显示，参考文献列表也不显示的问题。排除语法使用不当</summary>
      
    
    
    
    <category term="Latex" scheme="https://lx09.github.io/categories/Latex/"/>
    
    
    <category term="vscode" scheme="https://lx09.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>Knowledge Graph: Overview</title>
    <link href="https://lx09.github.io/2022/06/08/Knowledge-Graph-Overview/"/>
    <id>https://lx09.github.io/2022/06/08/Knowledge-Graph-Overview/</id>
    <published>2022-06-08T06:48:12.000Z</published>
    <updated>2022-06-09T07:02:48.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="知识图谱构建技术"><a href="#知识图谱构建技术" class="headerlink" title="知识图谱构建技术"></a>知识图谱构建技术</h1><p>知识图谱构建技术图分成三个部分：<strong>知识获取， 数据融合和知识计算及应用</strong></p><h2 id="知识获取"><a href="#知识获取" class="headerlink" title="知识获取"></a>知识获取</h2><p>知识获取解决如何从非结构化、半结构化和结构化数据中获取知识。</p><ul><li><p>非结构化数据处理</p><ul><li><p>对非结构化数据提取正文。例如互联网数据存在大量的广告，正文提取技术希望有效过滤广告而只保留用户关注的文本内容</p></li><li><p>使用自然语言处理技术识别文章中的实体。如果已有一个知识库，使用实体链接将文章中的候选实体链接到知识库上；如果没有知识库，使用命名实体识别技术识别文章中的实体。如果实体存在别名或者简称，需要构建实体的同义词表，让不同实体具有相同的描述</p><blockquote><p>命名实体识别可能用到分词、词性标注，以及深度学习模型中需要用到分布式表达如词向量。为了得到不同粒度的知识还需要提取文本中的关键词，获取文章的潜在主题等。</p></blockquote></li><li><p>实体关系识别。部分实体关系识别技术使用句法结构来帮助确定两个实体间的关系，涉及依存分析或者语义解析。如果用户还想获取事件的详细内容，需要确定事件的触发词并获取事件相应描述的句子，同时识别句子中实体对应事件的角色</p></li></ul></li></ul><ul><li>半结构化数据处理。主要工作是通过包装器学习半结构化数据的抽取规则。半结构化数据具有大量重复性的结构，因此对数据进行少量的标注，可以让机器学到一定的规则，进而在整个站点下使用规则对同类型或符合某种关系的数据进行抽取。使用时需要使用ETL工具对数据进行重新组织、清洗和检测，最后得到符合用户使用目的的数据</li></ul><h3 id="实体关系识别技术"><a href="#实体关系识别技术" class="headerlink" title="实体关系识别技术"></a>实体关系识别技术</h3><ul><li><p>基于统计学的方法将识别实体间关系的问题转化为分类问题，需要加入实体关系上下文信息</p></li><li><p>基于监督的方法依赖大量的标注数据，不适用于构建大规模的KG</p></li><li><p>半监督学习，主要基于Bootstrap方法，利用少量实例作为初始种子集合，利用pattern学习方法进行学习，通过不断迭代，从非结构化数据中抽取实例，然后从新学到的实例中学习新的pattern，并扩充pattern集合</p></li><li><p>无监督学习一般利用语料中存在的大量冗余信息做聚类，在聚类结果的基础上给定关系。聚类方法本身难以描述关系，且低频实例召回率低，难以取得很好的抽取效果</p></li></ul><h2 id="知识融合"><a href="#知识融合" class="headerlink" title="知识融合"></a>知识融合</h2><p>从不同数据源获取的知识需要使用统一的术语将其融合成一个庞大的知识库。<strong>本体</strong>是提供统一术语的结构或者数据，不仅提供统一的术语字典，还构建了各个术语间的关系和限制。使用数据映射技术建立本体中术语和不同数据源抽取知识中词汇的映射关系。不同源的实体可能会指向现实世界的同一客体，使用实体匹配将不同数据源相同客体的数据进行融合。不同本体在某些术语中描述同一类数据，需要使用本体融合技术把不同本体融合</p><p>知识融合（knowledge fusion）与传统数据融合（data fusion）任务主要不同在于知识融合考虑多个知识抽取工具。除了抽取出来的事实本身可能存在不同的结果，不同抽取工具通过实体链接和本体匹配可能产生不同的结果。此外还需要考虑本体融合和实体融合。</p><h2 id="知识计算及应用"><a href="#知识计算及应用" class="headerlink" title="知识计算及应用"></a>知识计算及应用</h2><ul><li>知识计算通过本体或者规则推理技术获取数据中的隐含知识</li><li>链接预测可预测实体间隐含的关系</li><li>社会计算算法在知识网络上计算获取图谱中存在的团体，提供知识间关联的路径</li><li>不一致检测技术发现数据中的噪声和缺陷</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;知识图谱构建技术&quot;&gt;&lt;a href=&quot;#知识图谱构建技术&quot; class=&quot;headerlink&quot; title=&quot;知识图谱构建技术&quot;&gt;&lt;/a&gt;知识图谱构建技术&lt;/h1&gt;&lt;p&gt;知识图谱构建技术图分成三个部分：&lt;strong&gt;知识获取， 数据融合和知识计算及应用&lt;/st</summary>
      
    
    
    
    <category term="Knowledge Graph" scheme="https://lx09.github.io/categories/Knowledge-Graph/"/>
    
    
  </entry>
  
  <entry>
    <title>design patterns and good practices</title>
    <link href="https://lx09.github.io/2022/05/17/design-patterns-and-good-practices/"/>
    <id>https://lx09.github.io/2022/05/17/design-patterns-and-good-practices/</id>
    <published>2022-05-17T11:08:21.000Z</published>
    <updated>2022-05-18T10:45:46.846Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目对接和后续项目安排让我感觉代码能力急需提高。我认为重中之重就是代码架构这方面，欠缺比较多，因此从设计模式开始一点点补代码能力。这是一份<a href="https://homeworks.java.en.sdacademy.pro/design_pattern_and_good_practices/exercises/">设计模式的练习题</a>，正好入门设计模式。</p><h1 id="Exercise-1-singleton"><a href="#Exercise-1-singleton" class="headerlink" title="Exercise 1 - singleton"></a>Exercise 1 - singleton</h1><blockquote><p>单例模式是最简单的设计模式，其主要思想是类只能初始化一个实例，并且全部都可能使用这个实例。之前在写项目代码的时候，单例模式经常会用到，但是我都胡乱写的，用了很多类变量代替单例模式😤。</p></blockquote><p>Create a singleton Servers of <code>lazy</code> type. This singleton stores the list of servers (as String). Implement the following functionalities:</p><ul><li>adding a server to the list<ul><li>a method adding the server to the list should return boolean (true if the server has been added to the list, false if it’s otherwise)</li><li>adding is possible, if its name starts from http or https</li><li>adding a duplicated name is impossible.</li></ul></li><li>downloading a list of servers, that names start from http.</li><li>downloading a list of servers, that names start from https.</li></ul><blockquote><p><code>lazy</code>, i.e., <code>Lazy Instatiation</code>. As shown in the following code.It’ll only get instantiated when someone will invoke the getInstance() method. </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SingletonClasses;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Singleton being initialized&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>)</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exercise 1 - singleton</span></span><br><span class="line"><span class="comment"> * Create a singleton Servers of lazy type. This singleton stores the list of servers (as String). Implement the following functionalities:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  adding a server to the list</span></span><br><span class="line"><span class="comment"> *      a method adding the server to the list should return boolean (true if the server has been added to the list, false if it&#x27;s otherwise)</span></span><br><span class="line"><span class="comment"> *      adding is possible, if its name starts from http or https</span></span><br><span class="line"><span class="comment"> *      adding a duplicated name is impossible.</span></span><br><span class="line"><span class="comment"> *  downloading a list of servers, that names start from http.</span></span><br><span class="line"><span class="comment"> *  downloading a list of servers, that names start from https.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servers</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 唯一实例是类的静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Servers instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; serverList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数私有化，通过getInstance调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Servers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        serverList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Servers servers = Servers.getInstance() 来获取唯一实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Servers <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// lazy instatiation</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Servers();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addServer</span><span class="params">(<span class="keyword">final</span> String server)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (server.startsWith(<span class="string">&quot;http&quot;</span>) &amp;&amp; !serverList.contains(server)) &#123;</span><br><span class="line">            <span class="keyword">return</span> serverList.add(server);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getServersStartingWith</span><span class="params">(<span class="keyword">final</span> String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serverList.stream().filter(server -&gt; server.startsWith(prefix)).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHttpServers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serverList.stream().filter(server -&gt; server.startsWith(<span class="string">&quot;http&quot;</span>)).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHttpsServers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serverList.stream().filter(server -&gt; server.startsWith(<span class="string">&quot;https&quot;</span>)).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Exercise-2-singleton"><a href="#Exercise-2-singleton" class="headerlink" title="Exercise 2 - singleton"></a>Exercise 2 - singleton</h1><p>Change the singleton from Exercise 1 in a way, to make it usable in a multithreaded application.</p><blockquote><p>多线程适用的单例模式难点在于，Lazy Instatiation中多线程调用getInstance()时创建实例冲突</p></blockquote><blockquote><p><strong>解题思路</strong>：可以使用Java中对象锁保护getInstance()方法      </p></blockquote><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exercise 2 - singleton</span></span><br><span class="line"><span class="comment"> * Change the singleton from Exercise 1 in a way, to make it usable in a multithreaded application.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servers</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Servers instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; serverList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Servers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        serverList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Servers <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Servers.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Servers();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>getInstance()中双重判断instance==null的必要性：首先99%的情况不需要同步，所以synchronized关键字外有个判断比较高效。synchronized关键字范围内的判断是为了同步，假如没有这个，会有多个线程同时创建实例的冲突。</p></blockquote><h1 id="Exercise-3-singleton"><a href="#Exercise-3-singleton" class="headerlink" title="Exercise 3 - singleton"></a>Exercise 3 - singleton</h1><p>Change the singleton type from the previous exercise. Use <code>eager</code> type of singleton.</p><blockquote><p><code>eager</code> type, i.e., Eager Instatiation. the object should be created in advance and should be ready to use. </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SingletonClasses;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Singleton being initialized&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Eager Instatiation中多线程冲突的情况就没有了</p></blockquote><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Change the singleton type from the previous exercise. Use eager type of singleton.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servers</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Servers instance = <span class="keyword">new</span> Servers();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; serverList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Servers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        serverList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Servers <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="Exercise-4-singleton"><a href="#Exercise-4-singleton" class="headerlink" title="Exercise 4 - singleton"></a>Exercise 4 - singleton</h1><p>Change the singleton type from the previous exercise. Use <code>enum</code> type of singleton.</p><blockquote><p><a href="https://cloud.tencent.com/developer/article/1497592">Java单例模式</a>有7种，这个练习只覆盖其中4种。其中使用<code>Enum</code>创建单例模式类最为高效(我只记得最高效，原理不清楚😤)，因为</p><ul><li>反射安全</li><li>序列化/反序列化安全</li><li>写法简单</li><li>没有一个更有信服力的原因不去使用枚举</li></ul></blockquote><h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Change the singleton type from the previous exercise. Use enum type of singleton.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">EnumServers</span> </span>&#123;</span><br><span class="line">    <span class="comment">// EnumServers servers = EnumServers.INSTANCE</span></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; serverList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Servers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        serverList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Exercise-5-builder"><a href="#Exercise-5-builder" class="headerlink" title="Exercise 5 - builder"></a>Exercise 5 - builder</h1><p>Create a builder for a class, that hass the following fields</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String type;</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="keyword">private</span> List&lt;String&gt; toys;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>建造者模式，总是见到，从来没有深究过🤣，new一个对象后面加了一大串属性，原来是有大用。</p></blockquote><blockquote><p><a href="https://zhuanlan.zhihu.com/p/58093669">原理</a>:当一个类的构造函数参数超过4个，而且这些参数有些是可选的时，我们通常有两种办法来构建它的对象。</p><ul><li>折叠构造函数模式（telescoping constructor pattern）。就是定义多个不同的构造函数，参数太多，看着恶心</li><li>Javabean 模式。就是定义很多的<code>getter</code>和<code>setter</code>，勾起了不好的回忆，相见恨晚呐</li></ul></blockquote><blockquote><p>解决方案：在类中定义一个静态类Builder，见Solution中的代码。初始化时就可以使用 new Dog.Builder(required parameters).setName(name).setAge(age);</p></blockquote><h2 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> builder.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a builder for a class, that has the following fields</span></span><br><span class="line"><span class="comment"> * Builder should be defined inside the class Dog and shound be the only of creating its instance.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; toys;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Dog</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = builder.age;</span><br><span class="line">        <span class="keyword">this</span>.name = builder.name;</span><br><span class="line">        <span class="keyword">this</span>.type = builder.type;</span><br><span class="line">        <span class="keyword">this</span>.toys = builder.toys;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, type=&#x27;&quot;</span> + type + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, toys=&quot;</span> + toys +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String type;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">        <span class="keyword">private</span> List&lt;String&gt; toys;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setName</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setType</span><span class="params">(<span class="keyword">final</span> String type)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.type = type;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setAge</span><span class="params">(<span class="keyword">final</span> Integer age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setToys</span><span class="params">(<span class="keyword">final</span> List&lt;String&gt; toys)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.toys = toys;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Dog <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Dog(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Dog dog = new Dog.Builder().setAge(20).setName(&quot;bob&quot;).setType(&quot;dog&quot;).build();</code></p><h1 id="Exercise-6-adapter"><a href="#Exercise-6-adapter" class="headerlink" title="Exercise 6 - adapter"></a>Exercise 6 - adapter</h1><p>Create an adapter of a class ComputerGame to the interface PCGame.</p><p>Warnings:</p><ul><li>number in the name of the value PegiAgeRating means the minimum age of the player</li><li>mark the game as TripleA if its budget exceeds 50 millions</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerGame</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> PegiAgeRating pegiAgeRating;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Double budgetInMillionsOfDollars;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Integer minimumGpuMemoryInMegabytes;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Integer diskSpaceNeededInGB;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Integer ramNeededInGb;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Integer coresNeeded;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Double coreSpeedInGhz;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ComputerGame</span><span class="params">(<span class="keyword">final</span> String name, </span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="keyword">final</span> PegiAgeRating pegiAgeRating,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="keyword">final</span> Double budgetInMillionsOfDollars,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="keyword">final</span> Integer minimumGpuMemoryInMegabytes,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="keyword">final</span> Integer diskSpaceNeededInGB,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="keyword">final</span> Integer ramNeededInGb,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="keyword">final</span> Integer coresNeeded,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="keyword">final</span> Double coreSpeedInGhz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.pegiAgeRating = pegiAgeRating;</span><br><span class="line">    <span class="keyword">this</span>.budgetInMillionsOfDollars = budgetInMillionsOfDollars;</span><br><span class="line">    <span class="keyword">this</span>.minimumGpuMemoryInMegabytes = minimumGpuMemoryInMegabytes;</span><br><span class="line">    <span class="keyword">this</span>.diskSpaceNeededInGB = diskSpaceNeededInGB;</span><br><span class="line">    <span class="keyword">this</span>.ramNeededInGb = ramNeededInGb;</span><br><span class="line">    <span class="keyword">this</span>.coresNeeded = coresNeeded;</span><br><span class="line">    <span class="keyword">this</span>.coreSpeedInGhz = coreSpeedInGhz;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PegiAgeRating <span class="title">getPegiAgeRating</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pegiAgeRating;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Double <span class="title">getBudgetInMillionsOfDollars</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> budgetInMillionsOfDollars;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getMinimumGpuMemoryInMegabytes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> minimumGpuMemoryInMegabytes;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getDiskSpaceNeededInGB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> diskSpaceNeededInGB;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getRamNeededInGb</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ramNeededInGb;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getCoresNeeded</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> coresNeeded;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Double <span class="title">getCoreSpeedInGhz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> coreSpeedInGhz;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">PegiAgeRating</span> </span>&#123;</span><br><span class="line">  P3, P7, P12, P16, P18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Requirements</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Integer gpuGb;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Integer HDDGb;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Integer RAMGb;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Double cpuGhz;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Integer coresNum;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Requirements</span><span class="params">(<span class="keyword">final</span> Integer gpuGb,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="keyword">final</span> Integer HDDGb,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="keyword">final</span> Integer RAMGb,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="keyword">final</span> Double cpuGhz,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="keyword">final</span> Integer coresNum)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.gpuGb = gpuGb;</span><br><span class="line">    <span class="keyword">this</span>.HDDGb = HDDGb;</span><br><span class="line">    <span class="keyword">this</span>.RAMGb = RAMGb;</span><br><span class="line">    <span class="keyword">this</span>.cpuGhz = cpuGhz;</span><br><span class="line">    <span class="keyword">this</span>.coresNum = coresNum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getGpuGb</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gpuGb;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getHDDGb</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> HDDGb;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getRAMGb</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RAMGb;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Double <span class="title">getCpuGhz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cpuGhz;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getCoresNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> coresNum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PCGame</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">getTitle</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">Integer <span class="title">getPegiAllowedAge</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isTripleAGame</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">Requirements <span class="title">getRequirements</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</p><p>在某些时候，客户期望获得某种功能接口但现有的接口无法满足客户的需求，例如美国的正常供电电压为110V，一个中国人带了一款中国制造电器去美国，这个电器必须要在220V电压下才能充电使用。这种情况下，客户(中国人)的期望接口是有一个220V的电压为电器充电，但实际的接口是仅有一个110V的电压供电器充电，这种情况下就需要采用一根电压转换器(适配器)使得110V的电压能够转换为220V的电压，供客户使用。</p><p>将一个类的接口转换成客户希望的另外一个接口，这就是适配器需要做的事情，适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p></blockquote><h2 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h2><p>简单来说，就是在不兼容的类外面再套一个类，用于实现不兼容接口的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> adapter.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerAdapter</span> <span class="keyword">implements</span> <span class="title">PCGame</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ComputerGame computerGame;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerAdapter</span><span class="params">(<span class="keyword">final</span> ComputerGame computerGame)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computerGame = computerGame;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> computerGame.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPegiAllowedAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (computerGame.getPegiAgeRating()) &#123;</span><br><span class="line">            <span class="keyword">case</span> P3:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">case</span> P7:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">            <span class="keyword">case</span> P12:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">            <span class="keyword">case</span> P16:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">16</span>;</span><br><span class="line">            <span class="keyword">case</span> P18:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">18</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Unsupported PEGI rating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTripleAGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> computerGame.getBudgetInMillionsOfDollars() &gt; <span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Requirements <span class="title">getRequirements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Requirements(computerGame.getMinimumGpuMemoryInMegabytes() / <span class="number">1024</span>, computerGame.getDiskSpaceNeededInGB(), computerGame.getRamNeededInGb(), computerGame.getCoreSpeedInGhz(), computerGame.getCoresNeeded());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Exercise-7-decorator"><a href="#Exercise-7-decorator" class="headerlink" title="# Exercise 7 - decorator"></a># Exercise 7 - decorator</h1><p>For the class <code>ExecutionTimesBaseStatistics</code>, with the use of interface <code>StatisticsLogger</code>, create two decorators, that add the following functionality:</p><p><code>WithMeanStatisticsLogger</code>, that displays the average of the results (values of list <code>executionTimes</code> in <code>ExecutionTimesBaseStatistics</code>) <strong>before</strong> displaying particular results<br><code>WithSummaryStatisticsLogger</code>, that <strong>before</strong> displaying particular results, displays the following statistics:</p><ul><li>number of records</li><li>sum</li><li>minimum value</li><li>maximum value</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StatisticsLogger</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">displayStatistics</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">List&lt;Double&gt; <span class="title">getExecutionTimes</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutionTimesBaseStatistics</span> <span class="keyword">implements</span> <span class="title">StatisticsLogger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Double&gt; executionTimes;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ExecutionTimesBaseStatistics</span><span class="params">(<span class="keyword">final</span> List&lt;Double&gt; executionTimes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.executionTimes = executionTimes;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayStatistics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    executionTimes.forEach(executionTime -&gt; stringBuilder.append(<span class="string">&quot;Execution time: &quot;</span>).append(executionTime).append(<span class="string">&quot;\n&quot;</span>));</span><br><span class="line">    System.out.println(stringBuilder.toString());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Double&gt; <span class="title">getExecutionTimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> executionTimes;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Simple main test:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratorDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> StatisticsLogger statisticsLogger = <span class="keyword">new</span> WithMeanStatisticsLogger(</span><br><span class="line">                                              <span class="keyword">new</span> WithSummaryStatisticsLogger(</span><br><span class="line">                                              <span class="keyword">new</span> ExecutionTimesBaseStatistics(List.of(<span class="number">1.2</span>, <span class="number">2.2</span>, <span class="number">3.4</span>))));</span><br><span class="line">    statisticsLogger.displayStatistics();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Decorator模式就是不定义过多子类的情况下，扩展某样功能。</p><p>JAVA I/O流中就是使用的Decorator。在Java标准库中，<code>InputStream</code>是抽象类，<code>FileInputStream</code>、<code>ServletInputStream</code>、<code>Socket.getInputStream()</code>这些InputStream都是最终数据源。这有三个子类，如果要给每个子类分别加缓冲功能、计算签名功能、加密解密功能，需要定义9种子类。使用decorator的话，只需要给三个额外功能都设计一个decorator类，对子类进行包装即可。</p></blockquote><h2 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h2><p>为<code>WithMeanStaticsLogger</code>和<code>WithSummaryStatisticsLogger</code>分别实现一个Decorator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> decorator.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WithMeanStatisticsLogger</span> <span class="keyword">implements</span> <span class="title">StatisticsLogger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StatisticsLogger statisticsLogger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WithMeanStatisticsLogger</span><span class="params">(StatisticsLogger statisticsLogger)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.statisticsLogger = statisticsLogger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayStatistics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> mean = getExecutionTimes().stream().mapToDouble(x -&gt; x).sum() / getExecutionTimes().size();</span><br><span class="line">        System.out.println(<span class="string">&quot;Mean is &quot;</span> + mean);</span><br><span class="line">        statisticsLogger.displayStatistics();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Double&gt; <span class="title">getExecutionTimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> statisticsLogger.getExecutionTimes();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> decorator.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WithSummaryStaticsLogger</span> <span class="keyword">implements</span> <span class="title">StatisticsLogger</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StatisticsLogger statisticsLogger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WithSummaryStaticsLogger</span><span class="params">(StatisticsLogger statisticsLogger)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.statisticsLogger = statisticsLogger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayStatistics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> number = getExecutionTimes().size();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> sum = getExecutionTimes().stream().mapToDouble(x -&gt; x).sum();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> minimum = getExecutionTimes().stream().mapToDouble(x -&gt; x).min().getAsDouble();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> maximum = getExecutionTimes().stream().mapToDouble(x -&gt; x).max().getAsDouble();</span><br><span class="line">        System.out.println(<span class="string">&quot;Number of records is &quot;</span> + number);</span><br><span class="line">        System.out.println(<span class="string">&quot;Sum is &quot;</span> + sum);</span><br><span class="line">        System.out.println(<span class="string">&quot;minimum is &quot;</span> + minimum);</span><br><span class="line">        System.out.println(<span class="string">&quot;maximum is &quot;</span> + maximum);</span><br><span class="line">        statisticsLogger.displayStatistics();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Double&gt; <span class="title">getExecutionTimes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> statisticsLogger.getExecutionTimes();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>很灵活，在需要使用这样功能的时候，再进行组装。之前也遇到过很多这种需求，我都是用一个巨大的类包含了所有功能，或者细分不同的小类，特别琐碎</p></blockquote><h1 id="Exercise-8-observer"><a href="#Exercise-8-observer" class="headerlink" title="Exercise 8 - observer"></a>Exercise 8 - observer</h1><p>Using the design pattern <strong>observer</strong> implement an application, that allows to observe a number and its reaction to changing it. In order to do that, implement:</p><ul><li><p>class <code>Subject</code>, that has the fields:</p><ul><li><code>observers</code> of type <code>List&lt;Observer&gt;</code></li><li><code>value</code> type <code>int</code></li><li>and the possibility of registering an <code>Observer</code> (a subscription), updating the field value and informing all observers about the value update</li></ul></li><li><p><strong>abstract</strong> class <code>Observer</code>, with the fields:</p><ul><li><code>subject</code> type Subject</li><li>abstract method <code>void update()</code>, that is the reaction to the status change (the field <code>value</code> in the class <code>Subject</code>)</li></ul></li><li><p>3 implementations of the class <code>Observer</code>, that accept the value of type <code>Subject</code> in the constructor and subscribe to it</p><ul><li>class <code>ConcreteValueObserver</code>, that in the method <code>update()</code> always displays the new value on the screen</li><li>class <code>ValueLoweredObserver</code>, that in the method <code>update()</code> displays the new value only if the updated value is smaller than the previous one</li><li>class <code>ByTenChangedObserver</code>, that in the method <code>update()</code>   displays the new value only if the updated value differs at least by 10 than the previous one.</li></ul></li><li><p>class, that in the main method creates an instance of the class <code>Subject</code> and all three types of observers. Subscribe them to the object of <code>Subject</code> type. Then update a few times the value on the object <code>Subject</code> and inform other observers about the changes.</p></li></ul><blockquote><p>观察者模式。一个类变化通知好几个观察者变化。之前写代码的时候，收集测试信息可以用这个来优化一下</p></blockquote><h2 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> observer.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachObserver</span><span class="params">(<span class="keyword">final</span> Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!observers.contains(observer))&#123;</span><br><span class="line">            observers.add(observer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detachObserver</span><span class="params">(<span class="keyword">final</span> Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeValue</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> change)</span> </span>&#123;</span><br><span class="line">        value += change;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> observer.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Subject subject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Observer</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">        subject.attachObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> observer.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteValueObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteValueObserver</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(subject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新后值为：&quot;</span> + subject.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> observer.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TenChangedObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> previousValue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TenChangedObserver</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(subject);</span><br><span class="line">        previousValue = subject.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Math.abs(previousValue - subject.getValue()) &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;变化大于10，之前是 &quot;</span> + previousValue + <span class="string">&quot; 现在是 &quot;</span> + subject.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        previousValue = subject.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> observer.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueLoweredObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> previousValue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValueLoweredObserver</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(subject);</span><br><span class="line">        previousValue = subject.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (previousValue &gt; subject.getValue()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;值变小了，之前是 &quot;</span> + previousValue + <span class="string">&quot; 现在是 &quot;</span> + subject.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        previousValue = subject.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Simple main test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> observer.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] values = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">19</span>, -<span class="number">1</span>, -<span class="number">11</span>, <span class="number">12</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line">        Observer concreteObserver = <span class="keyword">new</span> ConcreteValueObserver(subject);</span><br><span class="line">        Observer lowerObserver = <span class="keyword">new</span> ValueLoweredObserver(subject);</span><br><span class="line">        Observer tenChangedObserver = <span class="keyword">new</span> TenChangedObserver(subject);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> value : values) &#123;</span><br><span class="line">            subject.changeValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Exercise-9-memento"><a href="#Exercise-9-memento" class="headerlink" title="Exercise 9 - memento"></a>Exercise 9 - memento</h1><p>Create a simple implementation of a text editor that has the ability to undo recent changes (similar to pressing the <code>Ctrl + Z</code> combination in IntelliJ). This application should use the memento pattern. Implement:</p><ul><li>class <code>EditorText</code>, which has a value field of type <code>String</code> that represents the current value of the text in the text editor</li><li><code>EditorTextMemento</code> class, which represents the record of the <code>EditorText</code> object<ul><li>this class should have a value field of type <code>String</code> and should accept an object of type <code>EditorText</code> in the constructor</li></ul></li><li>class <code>EditorTextMementoManager</code>, which manages the list of memento objects as a stack (use <code>ArrayDeque</code>). Add methods:<ul><li><code>save</code>, which adds a new record to the stack.</li><li><code>restore</code>, which removes the last entry from the stack and returns it.</li></ul></li><li>add the <code>restoreFromMemento</code> method to <code>theEditorText</code> class, which restores the state of the text value of the editor based on the saved state (i.e. based on the <code>EditorTextMemento</code> object)</li><li>class with the <code>main</code> method, test your implementation, changing and saving the value of the text editor several times, and then restoring the next saved states.</li></ul><blockquote><p>Memento: 存储配置，方便回溯</p><p>备忘录模式的用意是在不破坏封装的条件下，将一个对象的状态捕捉(Capture)住，并外部化，存储起来，从而可以在将来合适的时候把这个对象还原到存储起来的状态，备忘录模式常常与命令模式和迭代子模式一同使用。</p></blockquote><h2 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> memento.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditorText</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String value = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addText</span><span class="params">(<span class="keyword">final</span> String textToAdd)</span> </span>&#123;</span><br><span class="line">        value += textToAdd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreFromMemento</span><span class="params">(EditorTextMemento editorTextMemento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (editorTextMemento == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        value = editorTextMemento.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> memento.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditorTextMemento</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EditorTextMemento</span><span class="params">(EditorText editorText)</span> </span>&#123;</span><br><span class="line">        value = editorText.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> memento.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditorTextMementoManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;EditorTextMemento&gt; mementoArrayDeque;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EditorTextMementoManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mementoArrayDeque = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(EditorTextMemento editorTextMemento)</span> </span>&#123;</span><br><span class="line">        mementoArrayDeque.push(editorTextMemento);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EditorTextMemento <span class="title">restore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mementoArrayDeque.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mementoArrayDeque.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Simple main test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> memento.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> EditorText editorText = <span class="keyword">new</span> EditorText();</span><br><span class="line">        <span class="keyword">final</span> EditorTextMementoManager mementoManager = <span class="keyword">new</span> EditorTextMementoManager();</span><br><span class="line">        mementoManager.save(<span class="keyword">new</span> EditorTextMemento(editorText));</span><br><span class="line"></span><br><span class="line">        editorText.addText(<span class="string">&quot;This is first line&quot;</span>);</span><br><span class="line">        mementoManager.save(<span class="keyword">new</span> EditorTextMemento(editorText));</span><br><span class="line"></span><br><span class="line">        editorText.addText(<span class="string">&quot;\nThis is second line&quot;</span>);</span><br><span class="line">        mementoManager.save(<span class="keyword">new</span> EditorTextMemento(editorText));</span><br><span class="line"></span><br><span class="line">        editorText.addText(<span class="string">&quot;\nThis is third line&quot;</span>);</span><br><span class="line">        mementoManager.save(<span class="keyword">new</span> EditorTextMemento(editorText));</span><br><span class="line"></span><br><span class="line">        editorText.addText(<span class="string">&quot; This is second part of 3rd line&quot;</span>);</span><br><span class="line">        mementoManager.save(<span class="keyword">new</span> EditorTextMemento(editorText));</span><br><span class="line"></span><br><span class="line">        System.out.println(editorText.getValue());</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        mementoManager.restore();</span><br><span class="line">        mementoManager.restore();</span><br><span class="line">        editorText.restoreFromMemento(mementoManager.restore());</span><br><span class="line">        System.out.println(editorText.getValue());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Exercise-10-template"><a href="#Exercise-10-template" class="headerlink" title="Exercise 10 - template"></a>Exercise 10 - template</h1><p>Create the skeleton performance test using the template method pattern:</p><ul><li><p>create an <strong>abstract</strong> class <code>PerformanceTestTemplate</code>, and then 3 abstract methods in it:</p><ul><li><code>void testIteration()</code> - performing a single iteration of the test</li><li><code>int getWarmupIterationsNum()</code> - returning the number of JVM warming iterations</li><li><code>int getIterationsNum()</code> - returning the number of iterations in the test</li></ul></li><li><p>to the <code>PerformanceTestTemplate</code> class, add the <code>void run ()</code> method, which first performs warm-up test iterations (whose results are ignored), followed by the actual test iterations. Such a test after all iterations should display the average duration of a single iteration on the screen</p></li><li><p>implementation of the <code>PerformanceTestTemplate</code> class, which during a single iteration, create a list of 10,000 random <code>Long</code> integers. Save them to the list, and then sort them.</p></li><li><p>class, with the main method, which will run the created test.</p></li></ul><blockquote><p>Template.</p><p>定义一个模板结构，将具体内容延迟到子类去实现</p></blockquote><h2 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> template.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PerformanceTestTemplate</span> </span>&#123;</span><br><span class="line">    <span class="comment">// performing a single iteration of the test</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">testIteration</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// returning the number of JVM warming iterations</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getWarmupIterationsNum</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// returning the number of iterations in the test</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getIterationsNum</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * first performs warm-up test iterations (whose results are ignored), followed by the actual test iterations.</span></span><br><span class="line"><span class="comment">     * Such a test after all iterations should display the average duration of a single iteration on the screen</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; getWarmupIterationsNum(); idx++) &#123;</span><br><span class="line">            testIteration();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> List&lt;Long&gt; iterationExecutionMillis = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; getIterationsNum(); idx++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            testIteration();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">            iterationExecutionMillis.add(end - start);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> avgMillis = iterationExecutionMillis.stream().mapToDouble(x -&gt; x).sum() / iterationExecutionMillis.size();</span><br><span class="line">        System.out.println(<span class="string">&quot;Avg time per iteration: &quot;</span> + avgMillis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> template.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerformanceTest</span> <span class="keyword">extends</span> <span class="title">PerformanceTestTemplate</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * implementation of the PerformanceTestTemplate class,</span></span><br><span class="line"><span class="comment">     * which during a single iteration, create a list of 10,000 random Long integers.</span></span><br><span class="line"><span class="comment">     * Save them to the list, and then sort them.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">testIteration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;Long&gt; longs = Stream.generate(() -&gt; <span class="keyword">new</span> Random().nextLong()).limit(<span class="number">10_000</span>).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">final</span> List&lt;Long&gt; sortedValues = longs.stream().sorted().collect(Collectors.toList());</span><br><span class="line">        System.out.println(sortedValues.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getWarmupIterationsNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getIterationsNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Simple main test:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> template.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PerformanceTestTemplate sortingTest = <span class="keyword">new</span> PerformanceTest();</span><br><span class="line">        sortingTest.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近项目对接和后续项目安排让我感觉代码能力急需提高。我认为重中之重就是代码架构这方面，欠缺比较多，因此从设计模式开始一点点补代码能力。这是一份&lt;a href=&quot;https://homeworks.java.en.sdacademy.pro/design_pattern_an</summary>
      
    
    
    
    <category term="Java" scheme="https://lx09.github.io/categories/Java/"/>
    
    
    <category term="design patterns" scheme="https://lx09.github.io/tags/design-patterns/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lx09.github.io/2021/10/29/hello-world/"/>
    <id>https://lx09.github.io/2021/10/29/hello-world/</id>
    <published>2021-10-29T06:02:31.120Z</published>
    <updated>2022-05-20T08:48:41.178Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
